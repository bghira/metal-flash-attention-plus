name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint and Format Check
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run non-Swift pre-commit hooks
        run: |
          # Run all hooks except Swift-specific ones
          pre-commit run --all-files trailing-whitespace
          pre-commit run --all-files end-of-file-fixer
          pre-commit run --all-files check-yaml
          pre-commit run --all-files check-json
          pre-commit run --all-files check-toml
          pre-commit run --all-files check-merge-conflict
          pre-commit run --all-files check-added-large-files
          pre-commit run --all-files mixed-line-ending
          pre-commit run --all-files markdownlint

  # Swift package testing with linting
  swift-tests:
    name: Swift Tests and Linting
    runs-on: macos-15
    strategy:
      matrix:
        configuration: [debug, release]
        xcode: ['16.4']

    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer

      - name: Set up Python (for pre-commit)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run Swift linting (debug only)
        if: matrix.configuration == 'debug'
        run: |
          # Run only Swift-related pre-commit hooks
          pre-commit run swiftformat --all-files

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build Swift Package
        run: swift build -c ${{ matrix.configuration }}

      - name: Run Swift Tests
        run: swift test -c ${{ matrix.configuration }} --parallel

      - name: Generate test coverage (release only)
        if: matrix.configuration == 'release'
        run: |
          swift test --enable-code-coverage
          xcrun llvm-cov export -format="lcov" \
            .build/debug/FlashAttentionPackageTests.xctest/Contents/MacOS/FlashAttentionPackageTests \
            -instr-profile .build/debug/codecov/default.profdata > coverage.lcov

      - name: Upload coverage to Codecov
        if: matrix.configuration == 'release'
        uses: codecov/codecov-action@v4
        with:
          file: coverage.lcov
          flags: swift
          name: swift-tests

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: macos-15
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Build release package
        run: swift build -c release

      - name: Run performance tests
        run: |
          # Run performance-focused tests
          swift test -c release --filter "Performance"

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Documentation checks
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/markdown-link-check.json'

      - name: Validate README structure
        run: |
          # Check that README has required sections
          if ! grep -q "## Installation" README.md; then
            echo "❌ README missing Installation section"
            exit 1
          fi
          if ! grep -q "## Usage" README.md; then
            echo "❌ README missing Usage section"
            exit 1
          fi
          echo "✅ README structure is valid"
